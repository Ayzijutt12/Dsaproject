#include <iostream>
#include <vector>
#include <limits.h>

using namespace std;

class Graph {
private:
    int length;
    int** adjmat;

public:
    Graph(int n) {
        createMatrix(n);
    }

    ~Graph() {
        for (int i = 0; i < length; i++) {
            delete[] adjmat[i];
        }
        delete[] adjmat;
    }

    void createMatrix(int length) {
        this->length = length;
        adjmat = new int*[length];
        for (int i = 0; i < length; i++) {
            adjmat[i] = new int[length];
            for (int j = 0; j < length; j++) {
                adjmat[i][j] = -1;
                if (i == j) {
                    adjmat[i][j] = 0;
                }
            }
        }
    }

    void addEdge(int start, int end, int weight) {
        if (start < 0 || end < 0 || weight < 0 || start >= length || end >= length) {
            cout << "Enter valid values\n";
        }
        else {
            adjmat[start][end] = weight;
        }
    }

    void displayMatrix() {
        cout << endl << "Adjacency Matrix:" << endl;
        cout << "__________________________________________________________" << endl;
        for (int i = 0; i < length; i++) {
            for (int j = 0; j < length; j++) {
                cout << adjmat[i][j] << "\t";
            }
            cout << "|" << endl;
        }
        cout << "__________________________________________________________" << endl << endl;
    }

    int findMin(int distance[], bool visited[]) {
        int minimum = INT_MAX;
        int minIndex = -1;
        for (int i = 0; i < length; i++) {
            if (!visited[i] && distance[i] <= minimum) {
                minimum = distance[i];
                minIndex = i;
            }
        }
        return minIndex;
    }

    void printDijkstra(int distance[]) {
        cout << "Vertex\tDistance from Source" << endl;
        for (int i = 0; i < length; i++) {
            cout << i << "\t" << distance[i] << endl;
        }
    }

    void dijkstra(int source) {
        int distance[length];
        bool visited[length];
        for (int i = 0; i < length; i++) {
            distance[i] = INT_MAX;
            visited[i] = false;
        }
        distance[source] = 0;
        for (int count = 0; count < length - 1; count++) {
            int u = findMin(distance, visited);
            visited[u] = true;
            for (int v = 0; v < length; v++) {
                if (!visited[v] && adjmat[u][v] != -1 && distance[u] != INT_MAX && distance[u] + adjmat[u][v] < distance[v]) {
                    distance[v] = distance[u] + adjmat[u][v];
                }
            }
        }
        printDijkstra(distance);
    }
};

int main() {
    Graph graph(5); // Creating a graph with 5 vertices

    // Adding edges to the graph
    graph.addEdge(0, 1, 4);
    graph.addEdge(0, 2, 1);
    graph.addEdge(2, 1, 2);
    graph.addEdge(1, 3, 1);
    graph.addEdge(2, 3, 5);
    graph.addEdge(3, 4, 3);

    // Displaying the adjacency matrix
    graph.displayMatrix();

    // Finding the shortest path using Dijkstra's algorithm
    cout << "Shortest Paths from Source 0 using Dijkstra's Algorithm:" << endl;
    graph.dijkstra(0);

    return 0;
}
